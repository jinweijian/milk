// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// SubscriptionPeriodsDao is the data access object for table subscription_periods.
type SubscriptionPeriodsDao struct {
	table   string                     // table is the underlying table name of the DAO.
	group   string                     // group is the database configuration group name of current DAO.
	columns SubscriptionPeriodsColumns // columns contains all the column names of Table for convenient usage.
}

// SubscriptionPeriodsColumns defines and stores column names for table subscription_periods.
type SubscriptionPeriodsColumns struct {
	Id               string //
	SubscriptionNo   string // 订阅单号
	Uid              string // 用户ID
	App              string // 应用标识
	Package          string // app包名称
	Channel          string // 支付渠道
	Version          string // 订阅时app版本号
	Sku              string // 商品ID
	PurchaseToken    string // 用户订阅的token
	TransactionNo    string // 续订交易号
	Amount           string // 订单金额
	CreatedBy        string // 创建资源的用户标识
	NotificationType string // 通知状态
	Type             string // 状态 1. 新订阅； 2.订阅成功续费 3. 订阅已过期； 4. 订阅已暂停； 5： 订阅已撤销
	Credential       string // json交易凭证
	CreatedAt        string // 创建时间
	UpdatedAt        string // 更新时间
	DeletedAt        string // 删除时间
	StartedAt        string // 订阅开始时间
	ExpiredAt        string // 订阅到期时间
}

//  subscriptionPeriodsColumns holds the columns for table subscription_periods.
var subscriptionPeriodsColumns = SubscriptionPeriodsColumns{
	Id:               "id",
	SubscriptionNo:   "subscription_no",
	Uid:              "uid",
	App:              "app",
	Package:          "package",
	Channel:          "channel",
	Version:          "version",
	Sku:              "sku",
	PurchaseToken:    "purchase_token",
	TransactionNo:    "transaction_no",
	Amount:           "amount",
	CreatedBy:        "created_by",
	NotificationType: "notification_type",
	Type:             "type",
	Credential:       "credential",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
	DeletedAt:        "deleted_at",
	StartedAt:        "started_at",
	ExpiredAt:        "expired_at",
}

// NewSubscriptionPeriodsDao creates and returns a new DAO object for table data access.
func NewSubscriptionPeriodsDao() *SubscriptionPeriodsDao {
	return &SubscriptionPeriodsDao{
		group:   "default",
		table:   "subscription_periods",
		columns: subscriptionPeriodsColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *SubscriptionPeriodsDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *SubscriptionPeriodsDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *SubscriptionPeriodsDao) Columns() SubscriptionPeriodsColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *SubscriptionPeriodsDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *SubscriptionPeriodsDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *SubscriptionPeriodsDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
